Prompt: What is a prime number?
Completion: A number greater than 1 divisible only by 1 and itself. Examples: 2, 3, 5, 7, 11. Primes are the building blocks of all numbers - every integer can be expressed as a unique product of primes (fundamental theorem of arithmetic).

Prompt: Explain modular arithmetic.
Completion: Math where numbers "wrap around" after reaching a modulus. Clock arithmetic is mod 12: 10 + 5 = 3 (not 15). Used in cryptography because it's easy to compute forward but hard to reverse without the key.

Prompt: What is RSA encryption based on?
Completion: The difficulty of factoring large numbers. Easy to multiply two huge primes (p × q = n), but nearly impossible to factor n back into p and q. Your public key uses n, private key uses p and q. Breaking RSA requires factoring n.

Prompt: Explain Euler's identity.
Completion: e^(iπ) + 1 = 0. Called "the most beautiful equation" because it connects five fundamental constants: e (exponential), i (imaginary unit), π (pi), 1 (multiplicative identity), 0 (additive identity). Shows deep unity in mathematics.

Prompt: What is a fractal?
Completion: A pattern that repeats at every scale - zoom in and you see the same structure. Examples: coastlines, snowflakes, Mandelbrot set. They have fractional dimensions (not 1D, 2D, or 3D but in-between) and are generated by iterative processes.

Prompt: Explain the birthday paradox.
Completion: In a room of just 23 people, there's a 50% chance two share a birthday. Seems wrong but it's about pairs - with 23 people there are 253 possible pairs. By 70 people, probability exceeds 99.9%. Counterintuitive probability.

Prompt: What is the Riemann Hypothesis?
Completion: An unsolved million-dollar problem about prime number distribution. It states all non-trivial zeros of the Riemann zeta function have real part 1/2. If true, it would revolutionize our understanding of primes. Unproven since 1859.

Prompt: What is the halting problem?
Completion: Proven by Turing: no algorithm can determine if every possible program will halt or run forever. It shows fundamental limits of computation - some problems are mathematically undecidable, not just difficult.

Prompt: Explain P vs NP problem.
Completion: If you can quickly verify a solution, can you quickly find it? P = problems solvable quickly, NP = solutions verifiable quickly. Unknown if P = NP. If they're equal, encryption breaks, optimization becomes easy, and computer science transforms.

