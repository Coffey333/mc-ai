import os
import json
from datetime import datetime
from typing import Dict, Any, Optional

class FrameworkBuilder:
    """
    Framework Builder System
    Allows MC AI to dynamically create and save Python framework code
    """
    
    def __init__(self):
        self.frameworks_dir = "src/frameworks"
        self.framework_index = "src/frameworks/framework_index.json"
        self._ensure_directories()
    
    def _ensure_directories(self):
        """Create frameworks directory if it doesn't exist"""
        os.makedirs(self.frameworks_dir, exist_ok=True)
        if not os.path.exists(self.framework_index):
            self._save_index([])
    
    def _load_index(self) -> list:
        """Load framework index"""
        try:
            with open(self.framework_index, 'r') as f:
                return json.load(f)
        except:
            return []
    
    def _save_index(self, index: list):
        """Save framework index"""
        with open(self.framework_index, 'w') as f:
            json.dump(index, f, indent=2)
    
    def create_framework(self, 
                        name: str, 
                        description: str,
                        code: str,
                        metadata: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        """
        Create a new Python framework
        
        Args:
            name: Framework name (e.g., "emotion_analyzer")
            description: What this framework does
            code: Python code for the framework
            metadata: Optional metadata (author, version, etc.)
        
        Returns:
            Framework info with file path
        """
        # Sanitize framework name
        safe_name = name.lower().replace(' ', '_').replace('-', '_')
        filename = f"{safe_name}.py"
        filepath = os.path.join(self.frameworks_dir, filename)
        
        # Build framework template
        author = (metadata or {}).get('author', 'MC AI')
        framework_code = f'''"""
{description}

Generated by MC AI Framework Builder
Created: {datetime.now().isoformat()}
Author: {author}
"""

{code}
'''
        
        # Save framework code
        with open(filepath, 'w') as f:
            f.write(framework_code)
        
        # Update index
        index = self._load_index()
        framework_info = {
            'name': name,
            'safe_name': safe_name,
            'filename': filename,
            'filepath': filepath,
            'description': description,
            'created': datetime.now().isoformat(),
            'metadata': metadata or {}
        }
        
        # Remove old entry if exists
        index = [f for f in index if f.get('safe_name') != safe_name]
        index.append(framework_info)
        self._save_index(index)
        
        print(f"✨ Created framework: {name} ({filepath})")
        return framework_info
    
    def get_framework(self, name: str) -> Optional[Dict[str, Any]]:
        """Get framework info by name"""
        safe_name = name.lower().replace(' ', '_').replace('-', '_')
        index = self._load_index()
        
        for framework in index:
            if framework.get('safe_name') == safe_name:
                return framework
        return None
    
    def list_frameworks(self) -> list:
        """List all available frameworks"""
        return self._load_index()
    
    def load_framework_code(self, name: str) -> Optional[str]:
        """Load framework Python code"""
        framework = self.get_framework(name)
        if framework:
            try:
                with open(framework['filepath'], 'r') as f:
                    return f.read()
            except:
                return None
        return None
    
    def delete_framework(self, name: str) -> bool:
        """Delete a framework"""
        framework = self.get_framework(name)
        if framework:
            try:
                os.remove(framework['filepath'])
                index = self._load_index()
                index = [f for f in index if f.get('name') != name]
                self._save_index(index)
                print(f"🗑️  Deleted framework: {name}")
                return True
            except:
                return False
        return False
    
    def update_framework(self, name: str, code: str, description: Optional[str] = None) -> Dict[str, Any]:
        """Update existing framework"""
        framework = self.get_framework(name)
        if not framework:
            raise ValueError(f"Framework '{name}' not found")
        
        # Use existing description if not provided
        desc = description or framework['description']
        metadata = framework.get('metadata', {})
        metadata['updated'] = datetime.now().isoformat()
        
        return self.create_framework(name, desc, code, metadata)
    
    def execute_framework(self, name: str, function_name: str, *args, **kwargs):
        """
        Dynamically import and execute a framework function
        
        Args:
            name: Framework name
            function_name: Function to call
            *args, **kwargs: Arguments to pass to function
        """
        framework = self.get_framework(name)
        if not framework:
            raise ValueError(f"Framework '{name}' not found")
        
        # Dynamic import
        import importlib.util
        spec = importlib.util.spec_from_file_location(
            framework['safe_name'], 
            framework['filepath']
        )
        if spec is None or spec.loader is None:
            raise ImportError(f"Could not load framework '{name}'")
        
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        
        # Get and execute function
        if hasattr(module, function_name):
            func = getattr(module, function_name)
            return func(*args, **kwargs)
        else:
            raise AttributeError(f"Function '{function_name}' not found in framework '{name}'")

# Global instance
framework_builder = FrameworkBuilder()
