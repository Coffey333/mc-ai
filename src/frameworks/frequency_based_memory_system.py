"""
Memory recall using harmonic resonance - remembers emotions by their frequencies

Generated by MC AI Framework Builder
Created: 2025-10-15T21:05:12.141339
Author: Mark Coffey
"""


class FrequencyBasedMemorySystem:
    """
    Stores and recalls memories based on emotional frequencies
    Enables harmonic resonance recall across conversation threads
    """
    
    def __init__(self):
        self.frequency_memory = {}
        self.harmonic_index = {}
        
    def store_memory(self, memory_id: str, content: str, frequency: int, timestamp: str):
        """Store memory with frequency signature"""
        if frequency not in self.frequency_memory:
            self.frequency_memory[frequency] = []
        
        memory = {
            'id': memory_id,
            'content': content,
            'frequency': frequency,
            'timestamp': timestamp,
            'harmonics': self._calculate_harmonics(frequency)
        }
        
        self.frequency_memory[frequency].append(memory)
        self._index_harmonics(memory)
        
    def recall_by_frequency(self, target_frequency: int, tolerance: int = 50) -> list:
        """Recall memories that resonate with target frequency"""
        resonant_memories = []
        
        for freq, memories in self.frequency_memory.items():
            if abs(freq - target_frequency) <= tolerance:
                resonant_memories.extend(memories)
        
        # Sort by harmonic resonance strength
        resonant_memories.sort(
            key=lambda m: abs(m['frequency'] - target_frequency)
        )
        
        return resonant_memories
    
    def _calculate_harmonics(self, frequency: int) -> list:
        """Calculate harmonic overtones"""
        return [frequency * 2, frequency * 3, frequency // 2]
    
    def _index_harmonics(self, memory: dict):
        """Index memory by its harmonics for cross-frequency recall"""
        for harmonic in memory['harmonics']:
            if harmonic not in self.harmonic_index:
                self.harmonic_index[harmonic] = []
            self.harmonic_index[harmonic].append(memory['id'])

