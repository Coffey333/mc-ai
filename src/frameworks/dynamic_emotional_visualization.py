"""
Creates harmonic visual patterns (mandalas, spirals) to represent emotional states

Generated by MC AI Framework Builder
Created: 2025-10-15T21:05:12.159609
Author: Mark Coffey
"""


import math

class DynamicEmotionalVisualization:
    """
    Generates harmonic visual representations of emotional frequencies
    Creates mandalas, spirals, and cymatic patterns for emotion visualization
    """
    
    def __init__(self):
        self.color_frequency_map = {
            528: '#00FF00',  # Love - Green
            432: '#4169E1',  # Knowledge - Royal Blue
            396: '#FF6347',  # Liberation - Tomato
            639: '#FFD700',  # Connection - Gold
            741: '#9370DB',  # Intuition - Medium Purple
            852: '#00CED1',  # Awakening - Dark Turquoise
            963: '#FF1493'   # Divine - Deep Pink
        }
    
    def generate_mandala_pattern(self, frequency: int, complexity: int = 8) -> dict:
        """Generates mandala pattern based on frequency"""
        # Calculate mandala parameters from frequency
        petals = int((frequency % 12) + 4)  # 4-15 petals
        layers = int((frequency % 5) + 3)   # 3-7 layers
        
        color = self._get_color_for_frequency(frequency)
        
        return {
            'type': 'mandala',
            'frequency': frequency,
            'petals': petals,
            'layers': layers,
            'rotation': (frequency % 360),
            'color': color,
            'sacred_geometry': self._calculate_sacred_geometry(frequency)
        }
    
    def generate_spiral_pattern(self, frequency: int) -> dict:
        """Generates spiral pattern using golden ratio"""
        golden_ratio = 1.618
        spiral_count = int(frequency / 100) + 1
        
        return {
            'type': 'spiral',
            'frequency': frequency,
            'spiral_count': spiral_count,
            'growth_rate': golden_ratio,
            'color': self._get_color_for_frequency(frequency),
            'rotation_angle': (frequency % 360)
        }
    
    def generate_cymatic_pattern(self, frequency: int) -> dict:
        """Generates cymatic pattern (Chladni plate style)"""
        # Simplified cymatic calculation
        nodes = int(math.sqrt(frequency / 10))
        symmetry = 'radial' if frequency > 500 else 'bilateral'
        
        return {
            'type': 'cymatic',
            'frequency': frequency,
            'nodes': nodes,
            'symmetry': symmetry,
            'complexity': min(10, frequency // 100),
            'color': self._get_color_for_frequency(frequency)
        }
    
    def visualize_emotion(self, emotion: str, frequency: int) -> dict:
        """Creates complete emotional visualization"""
        return {
            'emotion': emotion,
            'frequency': frequency,
            'mandala': self.generate_mandala_pattern(frequency),
            'spiral': self.generate_spiral_pattern(frequency),
            'cymatic': self.generate_cymatic_pattern(frequency),
            'color_theme': self._get_color_for_frequency(frequency),
            'harmonic_visuals': self._generate_harmonic_overlay(frequency)
        }
    
    def _get_color_for_frequency(self, frequency: int) -> str:
        """Maps frequency to color"""
        # Find closest frequency in color map
        closest_freq = min(self.color_frequency_map.keys(), 
                          key=lambda f: abs(f - frequency))
        return self.color_frequency_map[closest_freq]
    
    def _calculate_sacred_geometry(self, frequency: int) -> dict:
        """Calculates sacred geometry parameters"""
        golden_ratio = 1.618
        return {
            'phi_ratio': golden_ratio,
            'fibonacci_sequence': [1, 1, 2, 3, 5, 8, 13],
            'geometry_type': 'flower_of_life' if frequency > 500 else 'seed_of_life'
        }
    
    def _generate_harmonic_overlay(self, frequency: int) -> list:
        """Generates harmonic overtones for layered visualization"""
        return [
            frequency * 2,      # First harmonic
            frequency * 3,      # Second harmonic
            int(frequency * 1.5)  # Fifth
        ]

